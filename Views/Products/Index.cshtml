﻿@using Html2ViewsConversion.Models.Products
@model ProductListViewModel;

@{
    ViewData["Title"] = "Product Management";
}

<main class="container my-4">

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Product Management</h1>
        <a href="product-form.html" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>Add New Product
        </a>
    </div>
    <!-- Header section -->
    <partial name="_ProductListHeaderPartial" model="Model" />

    <!-- Filter Section -->
    <partial name="_ProductFlterPartial" model="Model.Filter" />

    <!-- Products Table -->
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Products.Any())
                {
                    foreach (var product in Model.Products)
                    {
                        <partial name="_ProductItemPartial" model="product" />
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="text-center py-4">
                            <p class="text-muted mb-0">No products found. Try adjusting your filters or add a new product.</p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    @if (Model.Pagination.TotalItems > 0)
    {
        <partial name="_PaganationPartial" model="Model.Pagination" />
    }
</main>


<partial name="_DeleteConfirmationPartial" />

@section Scripts {
    <script src="~/js/products.js"></script>
    <script>
          function toggleStatus(id, status) {
            // onpageshow loading status
            const button = event.currentTarget;
            const originalHtml = button.innerHTML;
            button.disabled = true;
            button.innerHTML= '<span class="spinner-border spinner-border-sm" role="status"></span>';
            // making Ajax request
            fetch(`/Products/ToggleStatus?id=${id}&status=${status}`,{
                method: 'POST',
                headers:{
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                const row = button.closest('tr');
                row.outerHTML = html;

                initToolTips();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while toggling the status. Please try again.');
                button.disabled = false;
                button.innerHtml = originalHtml;
            })
        }

        function initToolTips(){
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
        }





        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });

            const deleteModal = document.getElementById('deleteModal');
          
            if (deleteModal) {
                deleteModal.addEventListener('show.bs.modal', function (event) {
                    const itemDeleteButton = event.relatedTarget;

                    const productId = itemDeleteButton.getAttribute('data-id');

                    document.getElementById('productIdToDelete').value = productId;
                });
            };
        });

      
    </script>

}